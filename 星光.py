print("[星光]1.6.0\n")
import os
import json
from PIL import Image
选项 = input
提示 = print
调用 = open
取整 = int
取字 = str
遍历 = range
输出 = ''
模式 = ''
while True:
    模式 = 选项("\n[主页面]\n1. 资源包\n2. 地图册\n3. 图形\n4. 检查文件\n5. 浏览资源包\n6. 浏览地图册\n")
    if 模式 == "0":
        提示("告辞.")
        break
    elif 模式 == "1":
        提示("\n[资源包]")
        资源包 = "chc/" + 选项('资源包_') + ".json"
        #打开文件写入数据
        try:
            with 调用(资源包, 'r', encoding="utf-8") as 文件:
                数据 = json.load(文件)
        except FileNotFoundError:
            with 调用(资源包,'w',encoding="utf-8") as 文件:
                数据 = {"chc":[[0]*12]*256,"chj":["余烬"]*256}
                json.dump(数据,文件)
            提示(f"创建{资源包}")
        图形库,译名库 = 数据["chc"],数据["chj"]
        while True:
            序列 = 选项("序列号_")
            if 序列 == "0":
                数据 = {"chc":图形库,"chj":译名库}
                with 调用(资源包,'w',encoding="utf-8") as 文件:
                    json.dump(数据,文件)
                break 
            else:
                序列 = 取整(序列)
                标签 = 选项("标签_")
                主色 = 选项("主色_")
                c1,c2,c3 = [取整(主色[h:h+2], 16) for h in (0, 2, 4)]
                副色 = 选项("副色_")
                c4,c5,c6 = [取整(副色[h:h+2], 16) for h in (0, 2, 4)]
                图形库[序列] = [c1,c2,c3,c4,c5,c6,
                              取整(c1*0.75),取整(c2*0.75),取整(c3*0.75),
                              取整(c4*0.75),取整(c5*0.75),取整(c6*0.75)]
                译名库[序列] = 标签
                print(f"[{序列}]写入{图形库[序列]}")
    elif 模式 == "2":
        #加载资源包
        提示("\n[地图册]")
        资源包 = "chc/" + 选项('资源包_') + ".json"
        #如果文件夹不存在则新建
        if not os.path.exists("chc"):
            提示("请制作资源包")
            continue
        #打开文件写入数据
        try:
            with 调用(资源包, 'r', encoding="utf-8") as 文件:
                数据 = json.load(文件)
        except FileNotFoundError:
            提示(f"未找到{资源包}")
        图形库,译名库 = 数据["chc"],数据["chj"]
        地图册 = "trr/" + 选项('地图册_') + ".json"
        #打开文件写入数据
        try:
            with 调用(地图册, 'r', encoding="utf-8") as 文件:
                数据 = json.load(文件)
        except FileNotFoundError:
            with 调用(地图册,'w',encoding="utf-8") as 文件:
                数据 = {"tr":[[[[0]*12]*16]*16]*16,"trb":[[[0]*16]*16]*16}
                json.dump(数据,文件,ensure_ascii = False)
        地质,地形 = 数据["tr"],数据["trb"]
        选区 = [[[0]*16]*16]*16
        序列 = 1
        墨迹 = 1
        图形 = 图形库[序列]
        译名 = 译名库[序列]
        while True:
            模式 = 选项("\n[设计地图]\n2.1_ 放置方块\n2.2_ 选中区域\n2.3_ 选区内填充但不替换\n2.4_ 选区内填充\n2.5_ 重置选区\n2.6_ 设置笔刷\n2. ")
            if 模式 == "0":
                with 调用(地图册,'w',encoding="utf-8") as 文件:
                    json.dump({"tr":地质,"trb":地形},文件)
                break
            elif 模式 == "1":
                提示("[坐标]")
                x = 取整(选项("_"))
                y = 取整(选项("_"))
                z = 取整(选项("_"))
                地质[z][y][x] = 图形
                地形[z][y][x] = 墨迹
                提示(f"放置方块[{译名}]于({x},{y},{z})")
            elif 模式 == "2":
                提示("[起点坐标]")
                x1 = 取整(选项("_"))
                y1 = 取整(选项("_"))
                z1 = 取整(选项("_"))
                提示("[终点坐标]")
                x2 = 取整(选项("_"))
                y2 = 取整(选项("_"))
                z2 = 取整(选项("_"))
                for x in 遍历(x1, x2+1):
                    for y in 遍历(y1, y2+1):
                        for z in 遍历(z1, z2+1):
                            选区[z][y][x] = 墨迹
                提示(f"指向从({x1},{y1},{z1})到({x2},{y2},{z2})的方块")
            elif 模式 == "3":
                for z in 遍历(16):
                    for y in 遍历(16):
                        for x in 遍历(16):
                            if 选区[z][y][x] != 0:
                                地质[z][y][x] = 图形
                                地形[z][y][x] = 墨迹
                选区 = [[0 for _ in 遍历(16)] for _ in 遍历(16)]*16
                提示("填充并重置选区")
            elif 模式 == "4":
                for z in 遍历(16):
                    for y in 遍历(16):
                        for x in 遍历(16):
                            if 选区[z][y][x] != 0 and 地形[z][y][x] == 0:
                                地质[z][y][x] = 图形
                                地形[z][y][x] = 墨迹
                选区 = [[[0]*16]*16]*16
                提示("填充并重置选区")
            elif 模式 == "5":
                选区 = [[[0]*16]*16]*16
                提示("重置选区")
            elif 模式 == "6":
                参数 = 选项("设置笔刷_")
                if 参数 != "0":
                    提示("正在拆除")
                    墨迹 = 0
                else:
                    try:
                        r = 取整(r)
                        图形 = 图形库[参数]
                        译名 = 译名库[参数]
                        提示(f"持有{译名}")
                        墨迹 = 1
                    except ValueError:
                        提示("[提示]输入小于256的整数以指定方块")
            else:
                提示("\n[提示]\n输入数字继续\n输入0返回")
    elif 模式 == "3":
        提示("\n[人工黎明]")
        #1. 加载数据
        地图册 = "trr/" + 选项("地图册_") + ".json"
        try:
            with 调用(地图册, 'r', encoding="utf-8") as 文件:
                数据 = json.load(文件)
        except FileNotFoundError:
            提示(f"找不到{地图册}")
            continue
        地质库,地形库 = 数据["tr"],数据["trb"]
        图 = "map/" + 选项("示意图_") + ".png"
        提示("传送数据...")
        #2. 生成邻接序列
        邻接库 = [[[0]*18]*18]*18
        for z in 遍历(16):
            for y in 遍历(16):
                for x in 遍历(16):
                    if 地形库[z][y][x] != 0:
                        邻接库[z+1][y+1][x+1] = 1
        #3. 生成总画布
        取色库 = [[(0,0,0)]*193]*193
        渲染库 = [[0]*193]*193
        #4. 生成像素分布序列
        for z in 遍历(16):
            for y in 遍历(16):
                for x in 遍历(16):
                    #5. 对于每一个不透明的方块
                    if 地形库[z][y][x] == 1:
                        #6. 创建画布
                        取色 = [[(0,0,0)]*13]*13
                        渲染 = [[0]*13]*13
                        #7. 加载数据
                        地质 = 地质库[z][y][x]
                        邻接 = [邻接库[z+1][y+1][x+2],
                                邻接库[z+1][y+1][ x ],
                                邻接库[z+1][y+2][x+1],
                                邻接库[z+1][ y ][x+1],
                                邻接库[z+2][y+1][x+1],
                                邻接库[ z ][y+1][x+1]]
                        主色,副色,暗主色,暗副色 = ((地质[0], 地质[1], 地质[2]),
                                                (地质[3], 地质[4], 地质[5]),
                                                (地质[6], 地质[7], 地质[8]),
                                                (地质[9],地质[10],地质[11]))
                        print(邻接)
                        #8. 填色
                        if 邻接[4] == 0:
                            for i in 遍历(2,11):
                                取色[1][i] = 主色
                            for i in 遍历(2,11):
                                取色[2][i] = 主色
                            取色[0][5] = 主色
                            取色[0][6] = 主色
                            取色[0][7] = 主色
                            取色[3][5] = 主色
                            取色[3][6] = 主色
                            取色[3][7] = 主色
                            if 邻接[0] == 0:
                                取色[2][0] = 副色
                                取色[2][1] = 副色
                                取色[3][2] = 副色
                                取色[3][3] = 副色
                                取色[3][4] = 副色
                                取色[4][5] = 副色
                                取色[4][6] = 副色
                            if 邻接[1] == 0:
                                渲染[0][5] = 2
                                渲染[0][6] = 2
                                渲染[0][7] = 2
                                渲染[1][8] = 2
                                渲染[1][9] = 2
                                渲染[1][10] = 2
                            if 邻接[2] == 0:
                                取色[2][12] = 副色
                                取色[2][11] = 副色
                                取色[3][10] = 副色
                                取色[3][9] = 副色
                                取色[3][8] = 副色
                                取色[4][7] = 副色
                                取色[4][6] = 副色
                            if 邻接[3] == 0:
                                渲染[0][7] = 2
                                渲染[0][6] = 2
                                渲染[0][5] = 2
                                渲染[1][4] = 2
                                渲染[1][3] = 2
                                渲染[1][2] = 2
                        if 邻接[5] == 0:
                            if 邻接[0] == 0:
                                渲染[10][0] = 1
                                渲染[10][1] = 1
                                渲染[11][2] = 1
                                渲染[11][3] = 1
                                渲染[11][4] = 1
                                渲染[12][5] = 1 
                            if 邻接[2] == 0:
                                渲染[10][12] = 1
                                渲染[10][11] = 1
                                渲染[11][10] = 1
                                渲染[11][9] = 1
                                渲染[11][8] = 1
                                渲染[12][7] = 1
                        print(取色)
                        if 邻接[0] == 0:
                            if 邻接[3] == 0:
                                for 粒子 in 遍历(3,11):
                                    渲染[粒子][12] = 3
                            for j in 遍历(3,11):
                                取色[j][0] = 暗主色
                            for j in 遍历(3,11):
                                取色[j][1] = 暗主色
                            for j in 遍历(4,12):
                                取色[j][2] = 暗主色 
                            for j in 遍历(4,12):
                                取色[j][3] = 暗主色  
                            for j in 遍历(4,12):
                                取色[j][4] = 暗主色
                            for j in 遍历(5,13):
                                取色[j][5] = 暗主色
                        if 邻接[2] == 0:
                            if 邻接[1] == 0:
                                for 粒子 in 遍历(3,11):
                                    渲染[粒子][12] = 3
                            for j in 遍历(5,13):
                                取色[j][12] = 暗主色
                            for j in 遍历(5,13):
                                取色[j][11] = 暗主色
                            for j in 遍历(4,12):
                                取色[j][10] = 暗主色 
                            for j in 遍历(4,12):
                                取色[j][9] = 暗主色  
                            for j in 遍历(4,12):
                                取色[j][8] = 暗主色
                            for j in 遍历(3,11):
                                取色[j][7] = 暗主色
                        if 邻接[0] == 0 and 邻接[2] == 0:
                            for 粒子 in 遍历(5,13):
                                取色[粒子][6] = 暗副色
                        print(渲染)
                        #9. 从空间坐标到平面坐标
                        X = 6 * (15 - x + y)
                        Y = 2 * (60 + x + y - 4 * z)
                        #10. 渲染区预留
                        for j in 遍历(13):
                            for i in 遍历(2,11):
                                渲染库[X+j][Y+i] = 0 
                        for j in 遍历(2,11):
                            渲染库[X+j][Y+1] = 0
                        for j in 遍历(2,11):
                            渲染库[X+j][Y+11] = 0
                        渲染库[X+5][Y] = 0
                        渲染库[X+6][Y] = 0
                        渲染库[X+7][Y] = 0
                        渲染库[X+5][Y+12] = 0
                        渲染库[X+6][Y+12] = 0
                        渲染库[X+7][Y+12] = 0
                        #11. 数据传送
                        for j in 遍历(13):
                            for i in 遍历(13):
                                if 取色[j][i] != (0,0,0):
                                    取色库[X+i][Y+j] = 取色[j][i]
        #12. 生成图形
        画布 = Image.new('RGBA',(193,193), color=(255, 255, 255, 0))
        for j in 遍历(193):
            for i in 遍历(193):
                R,G,B = 取色库[j][i]
                #13. 渲染
                if 渲染库[j][i] == 1:
                    R = int(R*0.75)
                    G = int(G*0.75)
                    B = int(B*0.75) 
                if 渲染库[j][i] == 2:
                    R = int(R*0.75)+63
                    G = int(G*0.75)+63
                    B = int(B*0.75)+63
                if 渲染库[j][i] == 3:
                    R = int(R*0.875)
                    G = int(G*0.875)
                    B = int(B*0.875)
                画布.putpixel((j,i),(R,G,B,255))
        #14. 存储图形
        画布.save(图)
        提示(f"保存为{图}")
        画布.show()
    elif 模式 == "4":
        提示("\n[检查文件]\n传送数据...\n")
        v1 = os.path.abspath('.')
        for v2, v3, v4 in os.walk(v1):
            v5 = v2.replace(v1,'').count(os.sep)
            v6 = '| ' * v5
            输出 += f'{v6}[{os.path.basename(v2)}]\n'
            v7 = '| ' * (v5 + 1)
            for v8 in v4:
                输出 += f'{v7}{v8}\n'
        提示(输出)
        输出 = ''
    elif 模式 == "5":
        提示("\n[浏览]")
        资源包 = "chc/" + 选项('资源包_') + ".json"
        提示("传送数据...\n")
        try:
            with 调用(资源包,'r',encoding="utf-8") as 文件:
                数据 = json.load(文件)
        except FileNotFoundError:
            提示("未找到资源包")
            continue
        图形库,译名库 = 数据["chc"],数据["chj"]
        for 粒子 in 遍历(256):
            输出 += f"[{粒子}]{译名库[粒子]}_{图形库[粒子]}\n"
        提示(输出)
        输出 = ''
    elif 模式 == "6":
        提示("\n[浏览]")
        #输入地图册名字，如果在map没找到，报错。
        地图册 = "trr/" + 选项('地图册_') + ".json"
        提示("传送数据...\n")
        try:
            with 调用(地图册,'r',encoding="utf-8") as 文件:
                数据 = json.load(文件)
        except FileNotFoundError:
            提示("未找到地图册")
            continue
        地质 = 数据["tr"]
        输出 = "[方块序列]"
        for z in 遍历(16):
            输出 += f"\n|\n[z={z}]__________________________________"
            for y in 遍历(16):
                输出 += f"\n|\n| [y={y}]"
                for x in 遍历(16):
                    输出 += f"\n| | [x={x}]"
                    输出 += 取字(地质[z][y][x])
        提示(输出)
        输出 = ''
    else:
        选项("\n[提示]\n输入0返回\n输入数字继续")